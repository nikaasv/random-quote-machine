{"version":3,"sources":["components/button/index.jsx","components/quote-card/index.jsx","components/spinner/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","children","QuoteCard","className","quoteAuthor","quoteText","components_button","Spinner","concat","open","class","App","state","quote","error","clickHandler","_this","getQuote","setState","loading","fetch","then","response","ok","json","this","_ref","_ref$quoteAuthor","components_spinner","components_quote_card","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAOeA,qBAJA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,EAAMI,SAAUJ,EAAMK,YCS1BC,EATG,SAAAN,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACbN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeP,EAAMQ,aAClCP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,cAAcP,EAAMS,WACjCR,EAAAC,EAAAC,cAACO,EAAD,CAAQN,QAASJ,EAAMI,SAAvB,cCAWO,SANC,SAAAX,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKI,UAAS,oBAAAK,OAAsBZ,EAAMa,KAAO,QAAU,KACzDZ,EAAAC,EAAAC,cAAA,OAAKW,MAAM,UAAX,iBC8CWC,6MA7CbC,MAAQ,CAAEC,MAAO,KAAMC,MAAO,QAE9BC,aAAe,WACbC,EAAKC,cAGPA,SAAW,WACTD,EAAKE,SAAS,CAAEC,SAAS,IACzBC,MACE,+GAECC,KAAK,SAAAC,GACJ,OAAKA,EAASC,GAOPD,EAASE,OANPF,EACJE,OACAH,KAAK,SAAAP,GAAK,OACTE,EAAKE,SAAS,CAAEJ,QAAOD,MAAO,KAAMM,SAAS,QAKpDE,KAAK,SAAAR,GAAK,OAAIG,EAAKE,SAAS,CAAEL,QAAOC,MAAO,KAAMK,SAAS,0FAI9DM,KAAKR,4CAGE,IAAAS,EAC0CD,KAAKb,MAAMC,OAAS,GAA7DR,EADDqB,EACCrB,UADDsB,EAAAD,EACYtB,mBADZ,IAAAuB,EAC0B,YAD1BA,EAEP,OACE9B,EAAAC,EAAAC,cAAA,QAAMI,UAAU,YACdN,EAAAC,EAAAC,cAAC6B,EAAD,CAASnB,KAAMgB,KAAKb,MAAMO,UACzBM,KAAKb,MAAMC,QAAUY,KAAKb,MAAMO,SAC/BtB,EAAAC,EAAAC,cAAC8B,EAAD,CACE7B,QAASyB,KAAKV,aACdV,UAAWA,EACXD,YAAaA,YAtCP0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.f7e4a181.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./button.css\";\n\nconst Button = props => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport \"./quote-card.css\";\nimport Button from \"../button\";\n\nconst QuoteCard = props => (\n  <div className=\"quote-card\">\n    <p className=\"card-author\">{props.quoteAuthor}</p>\n    <hr />\n    <p className=\"card-quote\">{props.quoteText}</p>\n    <Button onClick={props.onClick}>Click me</Button>\n  </div>\n);\n\nexport default QuoteCard;\n","import React from \"react\";\nimport \"./spinner.css\";\n\nconst Spinner = props => (\n  <div className={`spinner-container${props.open ? \" open\" : \"\"}`}>\n    <div class=\"loader\">Loading...</div>\n  </div>\n);\n\nexport default Spinner;\n","import React from \"react\";\nimport \"./App.css\";\nimport QuoteCard from \"./components/quote-card\";\nimport Spinner from \"./components/spinner\";\n\nclass App extends React.Component {\n  state = { quote: null, error: null };\n\n  clickHandler = () => {\n    this.getQuote();\n  };\n\n  getQuote = () => {\n    this.setState({ loading: true });\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json\"\n    )\n      .then(response => {\n        if (!response.ok) {\n          return response\n            .json()\n            .then(error =>\n              this.setState({ error, quote: null, loading: false })\n            );\n        }\n        return response.json();\n      })\n      .then(quote => this.setState({ quote, error: null, loading: false }));\n  };\n\n  componentDidMount() {\n    this.getQuote();\n  }\n\n  render() {\n    const { quoteText, quoteAuthor = \"Anonymous\" } = this.state.quote || {};\n    return (\n      <main className=\"App-main\">\n        <Spinner open={this.state.loading} />\n        {this.state.quote && !this.state.loading && (\n          <QuoteCard\n            onClick={this.clickHandler}\n            quoteText={quoteText}\n            quoteAuthor={quoteAuthor}\n          />\n        )}\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}